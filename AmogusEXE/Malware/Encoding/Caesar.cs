using System;

namespace AmogusEXE.Malware.Encoding
{
    public enum CaesarEncoder
    {
        Encode,
        Decode
    }
    
    public sealed class Caesar
    {
        private long _key;
        
        public long Key
        {
            set => _key = value;
            get => _key;
        }

        private string _data;

        public string Data
        {
            get => _data;
            set => _data = value;
        }

        private string _operString;

        public string OperatedString
        {
            get => _operString;
            set => _operString = value;
        }
        
        public Caesar(string @string, int key, CaesarEncoder e)
        {
            Data = @string;
            Key = key;
            switch (e)
            {
                case CaesarEncoder.Encode:
                    OperatedString = Encode();
                    break;
                case CaesarEncoder.Decode:
                    OperatedString = Decode();
                    break;
                default:
                    goto case CaesarEncoder.Encode;
            }
        }

        private char Cipher(char ch)
        {
            if (!char.IsLetter(ch)) {  
  
                return ch;  
            }  
  
            char d = char.IsUpper(ch) ? 'A' : 'a';  
            return (char)((ch + Key - d) % 26 + d);  
        }
        
        private char Cipher(char ch, long key)
        {
            if (!char.IsLetter(ch)) {  
  
                return ch;  
            }  
  
            char d = char.IsUpper(ch) ? 'A' : 'a';  
            return (char)((ch + key - d) % 26 + d);  
        }
        
        public string Encode()
        {
            string @out = string.Empty;
            foreach (char ch in Data)
            {
                @out += Cipher(ch);
            }
            return @out;
        }

        private string Encode(string data, long key)
        {
            string @out = string.Empty;
            foreach (char ch in data)
            {
                @out += Cipher(ch, key);
            }
            return @out;
        }
        
        public string Decode()
        {
            return Encode(Data, 26 - Key);  
        }
    }
}