using System;
using System.IO;

namespace AmogusEXE.Malware.Writer
{
    public sealed class FileWriter
    {
        //////////
        private static readonly string AppData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        private static readonly string ProgramFiles = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
        private static readonly string Working = global::System.IO.Directory.GetCurrentDirectory();
        private static readonly string Desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        private static readonly string System = Environment.GetFolderPath(Environment.SpecialFolder.System);

        private static readonly string InjectorMinecraft = $@"{AppData}\.minecraft\";
        private static readonly string InjectorNone = Working;
        /////////
        private string _path;
        public string FilePath
        {
            get => _path;
            set => _path = value;
        }
        /////////
        private TextWriter writer;
        /////////

        private void Init(string filename, string directory)
        {
            FilePath = directory + filename;
            File.Create(FilePath);
            writer = new StreamWriter(FilePath);
        }

        private void Init(string path)
        {
            FilePath = path;
            File.Create(FilePath);
            writer = new StreamWriter(path);
        }
        
        //////////

        public FileWriter(string name, Directory directory, InjectorDirectory injctr=InjectorDirectory.None)
        {
            string p = Working;
            switch (directory)
            {
                case Directory.Desktop:
                    p = Desktop;
                    break;
                case Directory.System:
                    p = System;
                    break;
                case Directory.Working:
                    p = Working;
                    break; 
                case Directory.AppData:
                    p = AppData;
                    break;
                case Directory.ProgramFiles:
                    p = ProgramFiles;
                    break;
                case Directory.InjectorDirectory:
                    switch (injctr)
                    {
                        case InjectorDirectory.Minecraft:
                            p = InjectorMinecraft;
                            break;
                        case InjectorDirectory.None:
                            p = InjectorNone;
                            break;
                    }
                    break;
                default:
                    p = Working;
                    break;
            }
            Init(name, p);
        }

        public void Write(string data)
        {
            writer.WriteAsync(data);
        }
    }
}